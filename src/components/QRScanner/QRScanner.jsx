import React, { useEffect, useRef, useState } from 'react';
import { Modal, Button, Typography, Alert, Space } from 'antd';
import { CameraOutlined, StopOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
import { Html5Qrcode } from 'html5-qrcode';

const { Text } = Typography;

const QRScanner = ({ visible, onCancel, onScanResult }) => {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState(null);
  const [cameraPermission, setCameraPermission] = useState(null);
  const [debugInfo, setDebugInfo] = useState({});
  const html5QrCodeRef = useRef(null);

  const qrCodeSuccessCallback = (decodedText, decodedResult) => {
    console.log(`QR Code detected: ${decodedText}`, decodedResult);
    
    // Stop scanning and call parent callback
    stopScanning();
    onScanResult(decodedText);
  };

  const qrCodeErrorCallback = (errorMessage) => {
    // Handle scan errors (usually just no QR found, which is normal)
    // console.log(`QR Code scan error: ${errorMessage}`);
  };

  const checkBrowserSupport = () => {
    const info = {
      userAgent: navigator.userAgent,
      isHTTPS: window.location.protocol === 'https:',
      hasMediaDevices: !!navigator.mediaDevices,
      hasGetUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
      hasHtml5Qrcode: typeof Html5Qrcode !== 'undefined',
      isLocalhost: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
    };
    
    setDebugInfo(info);
    return info;
  };

  const startScanning = async () => {
    try {
      setError(null);
      setIsScanning(true);

      // Check browser support first
      const browserInfo = checkBrowserSupport();
      
      // Check if we're on HTTPS or localhost (required for camera access)
      if (!browserInfo.isHTTPS && !browserInfo.isLocalhost) {
        throw new Error('Camera ch·ªâ ho·∫°t ƒë·ªông tr√™n HTTPS ho·∫∑c localhost. Vui l√≤ng s·ª≠ d·ª•ng HTTPS ho·∫∑c localhost.');
      }

      // Check if Html5Qrcode is available
      if (!browserInfo.hasHtml5Qrcode) {
        throw new Error('Th∆∞ vi·ªán QR Scanner ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng t·∫£i l·∫°i trang.');
      }

      // Check if getUserMedia is supported
      if (!browserInfo.hasGetUserMedia) {
        throw new Error('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ truy c·∫≠p camera. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i (Chrome, Firefox, Safari).');
      }

      // Initialize Html5Qrcode
      html5QrCodeRef.current = new Html5Qrcode("qr-reader");

      // Get cameras with better error handling
      let cameras = [];
      try {
        cameras = await Html5Qrcode.getCameras();
        console.log('Available cameras:', cameras);
      } catch (cameraError) {
        console.error('Error getting cameras:', cameraError);
        throw new Error('Kh√¥ng th·ªÉ truy c·∫≠p danh s√°ch camera. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p camera.');
      }

      if (!cameras || cameras.length === 0) {
        throw new Error('Kh√¥ng t√¨m th·∫•y camera tr√™n thi·∫øt b·ªã n√†y. Vui l√≤ng ki·ªÉm tra camera v√† th·ª≠ l·∫°i.');
      }

      const cameraId = cameras[0].id;
      
      // Start scanning with back camera if available, otherwise use first camera
      const backCamera = cameras.find(camera => 
        camera.label.toLowerCase().includes('back') || 
        camera.label.toLowerCase().includes('rear')
      );
      const selectedCameraId = backCamera ? backCamera.id : cameraId;

      console.log('Starting camera with ID:', selectedCameraId);

      await html5QrCodeRef.current.start(
        selectedCameraId,
        {
          fps: 10,
          qrbox: { width: 250, height: 250 }
        },
        qrCodeSuccessCallback,
        qrCodeErrorCallback
      );

      setCameraPermission('granted');
      console.log('Camera started successfully');
    } catch (err) {
      console.error('Error starting QR scanner:', err);
      
      let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi ƒë·ªông camera';
      
      if (err.name === 'NotAllowedError') {
        errorMessage = 'Quy·ªÅn truy c·∫≠p camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng cho ph√©p truy c·∫≠p camera.';
        setCameraPermission('denied');
      } else if (err.name === 'NotFoundError') {
        errorMessage = 'Kh√¥ng t√¨m th·∫•y camera tr√™n thi·∫øt b·ªã n√†y.';
      } else if (err.name === 'NotSupportedError') {
        errorMessage = 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ truy c·∫≠p camera.';
      } else if (err.name === 'NotReadableError') {
        errorMessage = 'Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c. Vui l√≤ng ƒë√≥ng ·ª©ng d·ª•ng kh√°c v√† th·ª≠ l·∫°i.';
      } else if (err.name === 'OverconstrainedError') {
        errorMessage = 'Camera kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu k·ªπ thu·∫≠t.';
      } else if (err.name === 'SecurityError') {
        errorMessage = 'L·ªói b·∫£o m·∫≠t khi truy c·∫≠p camera. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t b·∫£o m·∫≠t.';
      } else if (err.name === 'AbortError') {
        errorMessage = 'Thao t√°c camera b·ªã h·ªßy. Vui l√≤ng th·ª≠ l·∫°i.';
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
      setIsScanning(false);
    }
  };

  const stopScanning = async () => {
    try {
      if (html5QrCodeRef.current && html5QrCodeRef.current.isScanning) {
        await html5QrCodeRef.current.stop();
        console.log('Camera stopped successfully');
      }
    } catch (err) {
      console.error('Error stopping scanner:', err);
    }
    
    setIsScanning(false);
  };

  const handleCancel = () => {
    stopScanning();
    onCancel();
  };

  // Auto start scanning when modal opens
  useEffect(() => {
    if (visible && !isScanning) {
      // Add a small delay to ensure the modal is fully rendered
      const timer = setTimeout(() => {
        startScanning();
      }, 200);
      
      return () => clearTimeout(timer);
    }
    
    return () => {
      if (html5QrCodeRef.current) {
        stopScanning();
      }
    };
  }, [visible]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (html5QrCodeRef.current) {
        stopScanning();
      }
    };
  }, []);

  return (
    <Modal
      title={
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          <CameraOutlined />
          <span>Qu√©t m√£ QR</span>
        </div>
      }
      open={visible}
      onCancel={handleCancel}
      footer={[
        <Button key="cancel" onClick={handleCancel}>
          ƒê√≥ng
        </Button>,
        <Button 
          key="stop" 
          type="primary" 
          danger 
          icon={<StopOutlined />}
          onClick={stopScanning}
          disabled={!isScanning}
        >
          D·ª´ng qu√©t
        </Button>,
      ]}
      width={500}
      centered
    >
      <div style={{ textAlign: 'center', padding: '20px 0' }}>
        {error ? (
          <Space direction="vertical" style={{ width: '100%' }}>
            <Alert
              message="L·ªói Camera"
              description={error}
              type="error"
              showIcon
            />
            {cameraPermission === 'denied' && (
              <Text type="secondary" style={{ fontSize: '12px' }}>
                ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng qu√©t QR, vui l√≤ng:
                <br />1. Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng camera tr√™n thanh ƒë·ªãa ch·ªâ
                <br />2. Ch·ªçn "Cho ph√©p" ƒë·ªÉ c·∫•p quy·ªÅn truy c·∫≠p camera
                <br />3. T·∫£i l·∫°i trang v√† th·ª≠ l·∫°i
              </Text>
            )}
            <Button type="primary" onClick={startScanning}>
              Th·ª≠ l·∫°i
            </Button>
            
            {/* Debug information for developers */}
            {process.env.NODE_ENV === 'development' && (
              <details style={{ marginTop: '16px', textAlign: 'left' }}>
                <summary style={{ cursor: 'pointer', color: '#1890ff' }}>
                  <ExclamationCircleOutlined /> Th√¥ng tin debug
                </summary>
                <pre style={{ 
                  marginTop: '8px',
                  padding: '8px',
                  background: '#f5f5f5',
                  borderRadius: '4px',
                  fontSize: '11px',
                  overflow: 'auto'
                }}>
                  {JSON.stringify(debugInfo, null, 2)}
                </pre>
              </details>
            )}
          </Space>
        ) : (
          <>
            <div
              id="qr-reader"
              style={{
                width: '100%',
                maxWidth: '400px',
                margin: '0 auto',
                border: '2px solid #1890ff',
                borderRadius: '8px',
                overflow: 'hidden',
                minHeight: '300px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#f5f5f5'
              }}
            >
              {!isScanning && (
                <div style={{ textAlign: 'center', color: '#666' }}>
                  <CameraOutlined style={{ fontSize: '48px', marginBottom: '16px' }} />
                  <br />
                  <Text>ƒêang kh·ªüi ƒë·ªông camera...</Text>
                </div>
              )}
            </div>
            
            {isScanning && (
              <div style={{ marginTop: '16px' }}>
                <Text type="secondary">
                  ƒêang qu√©t... H∆∞·ªõng camera v·ªÅ ph√≠a m√£ QR
                </Text>
                <div style={{ 
                  marginTop: '8px',
                  padding: '8px 16px',
                  background: '#f6ffed',
                  border: '1px solid #b7eb8f',
                  borderRadius: '4px',
                  display: 'inline-block'
                }}>
                  üì∑ Camera ƒëang ho·∫°t ƒë·ªông
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </Modal>
  );
};

export default QRScanner; 